#![allow(
    clippy::too_many_arguments,
    clippy::new_without_default,
    non_camel_case_types,
    unused_imports
)]
/*
 * Mayastor RESTful API
 *
 * The version of the OpenAPI document: v0
 *
 * Generated by: https://github.com/openebs/openapi-generator
 */

use crate::apis::IntoVec;

/// VolumeSpec : User specification of a volume.

/// User specification of a volume.
#[derive(Clone, Debug, Default, PartialEq, Serialize, Deserialize)]
pub struct VolumeSpec {
    /// Volume labels.
    #[serde(rename = "labels")]
    pub labels: Vec<String>,
    /// Number of front-end paths.
    #[serde(rename = "num_paths")]
    pub num_paths: u8,
    /// Number of children the volume should have.
    #[serde(rename = "num_replicas")]
    pub num_replicas: u8,
    #[serde(rename = "operation", skip_serializing_if = "Option::is_none")]
    pub operation: Option<crate::models::VolumeSpecOperation>,
    #[serde(rename = "protocol")]
    pub protocol: crate::models::Protocol,
    /// Size that the volume should be.
    #[serde(rename = "size")]
    pub size: u64,
    #[serde(rename = "status")]
    pub status: crate::models::SpecStatus,
    /// The node where front-end IO will be sent to
    #[serde(rename = "target_node", skip_serializing_if = "Option::is_none")]
    pub target_node: Option<String>,
    /// Volume Id
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,
}

impl VolumeSpec {
    /// VolumeSpec using only the required fields
    pub fn new(
        labels: impl IntoVec<String>,
        num_paths: impl Into<u8>,
        num_replicas: impl Into<u8>,
        protocol: impl Into<crate::models::Protocol>,
        size: impl Into<u64>,
        status: impl Into<crate::models::SpecStatus>,
        uuid: impl Into<uuid::Uuid>,
    ) -> VolumeSpec {
        VolumeSpec {
            labels: labels.into_vec(),
            num_paths: num_paths.into(),
            num_replicas: num_replicas.into(),
            operation: None,
            protocol: protocol.into(),
            size: size.into(),
            status: status.into(),
            target_node: None,
            uuid: uuid.into(),
        }
    }
    /// VolumeSpec using all fields
    pub fn new_all(
        labels: impl IntoVec<String>,
        num_paths: impl Into<u8>,
        num_replicas: impl Into<u8>,
        operation: impl Into<Option<crate::models::VolumeSpecOperation>>,
        protocol: impl Into<crate::models::Protocol>,
        size: impl Into<u64>,
        status: impl Into<crate::models::SpecStatus>,
        target_node: impl Into<Option<String>>,
        uuid: impl Into<uuid::Uuid>,
    ) -> VolumeSpec {
        VolumeSpec {
            labels: labels.into_vec(),
            num_paths: num_paths.into(),
            num_replicas: num_replicas.into(),
            operation: operation.into(),
            protocol: protocol.into(),
            size: size.into(),
            status: status.into(),
            target_node: target_node.into(),
            uuid: uuid.into(),
        }
    }
}

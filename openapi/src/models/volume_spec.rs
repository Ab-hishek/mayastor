#![allow(
    clippy::too_many_arguments,
    clippy::new_without_default,
    non_camel_case_types
)]
/*
 * Mayastor RESTful API
 *
 * The version of the OpenAPI document: v0
 *
 * Generated by: https://github.com/openebs/openapi-generator
 */

/// VolumeSpec : User specification of a volume.

/// User specification of a volume.
#[derive(Clone, Debug, Default, PartialEq, Serialize, Deserialize)]
pub struct VolumeSpec {
    /// Volume labels.
    #[serde(rename = "labels")]
    pub labels: Vec<String>,
    /// Number of front-end paths.
    #[serde(rename = "num_paths")]
    pub num_paths: i32,
    /// Number of children the volume should have.
    #[serde(rename = "num_replicas")]
    pub num_replicas: i32,
    #[serde(rename = "operation", skip_serializing_if = "Option::is_none")]
    pub operation: Option<crate::models::VolumeSpecOperation>,
    #[serde(rename = "protocol")]
    pub protocol: crate::models::Protocol,
    /// Size that the volume should be.
    #[serde(rename = "size")]
    pub size: i64,
    #[serde(rename = "state")]
    pub state: crate::models::SpecState,
    /// The node where front-end IO will be sent to
    #[serde(rename = "target_node", skip_serializing_if = "Option::is_none")]
    pub target_node: Option<String>,
    /// Volume Id
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,
}

impl VolumeSpec {
    /// VolumeSpec using only the required fields
    pub fn new(
        labels: Vec<String>,
        num_paths: i32,
        num_replicas: i32,
        protocol: crate::models::Protocol,
        size: i64,
        state: crate::models::SpecState,
        uuid: uuid::Uuid,
    ) -> VolumeSpec {
        VolumeSpec {
            labels,
            num_paths,
            num_replicas,
            operation: None,
            protocol,
            size,
            state,
            target_node: None,
            uuid,
        }
    }
    /// VolumeSpec using all fields
    pub fn new_all(
        labels: Vec<String>,
        num_paths: i32,
        num_replicas: i32,
        operation: Option<crate::models::VolumeSpecOperation>,
        protocol: crate::models::Protocol,
        size: i64,
        state: crate::models::SpecState,
        target_node: Option<String>,
        uuid: uuid::Uuid,
    ) -> VolumeSpec {
        VolumeSpec {
            labels,
            num_paths,
            num_replicas,
            operation,
            protocol,
            size,
            state,
            target_node,
            uuid,
        }
    }
}

#![allow(
    clippy::too_many_arguments,
    clippy::new_without_default,
    non_camel_case_types
)]
/*
 * Mayastor RESTful API
 *
 * The version of the OpenAPI document: v0
 *
 * Generated by: https://github.com/openebs/openapi-generator
 */

/// Replica : Replica information

/// Replica information
#[derive(Clone, Debug, Default, PartialEq, Serialize, Deserialize)]
pub struct Replica {
    /// id of the mayastor instance
    #[serde(rename = "node")]
    pub node: String,
    /// id of the pool
    #[serde(rename = "pool")]
    pub pool: String,
    #[serde(rename = "share")]
    pub share: crate::models::Protocol,
    /// size of the replica in bytes
    #[serde(rename = "size")]
    pub size: i64,
    #[serde(rename = "state")]
    pub state: crate::models::ReplicaState,
    /// thin provisioning
    #[serde(rename = "thin")]
    pub thin: bool,
    /// uri usable by nexus to access it
    #[serde(rename = "uri")]
    pub uri: String,
    /// uuid of the replica
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,
}

impl Replica {
    /// Replica using only the required fields
    pub fn new(
        node: String,
        pool: String,
        share: crate::models::Protocol,
        size: i64,
        state: crate::models::ReplicaState,
        thin: bool,
        uri: String,
        uuid: uuid::Uuid,
    ) -> Replica {
        Replica {
            node,
            pool,
            share,
            size,
            state,
            thin,
            uri,
            uuid,
        }
    }
    /// Replica using all fields
    pub fn new_all(
        node: String,
        pool: String,
        share: crate::models::Protocol,
        size: i64,
        state: crate::models::ReplicaState,
        thin: bool,
        uri: String,
        uuid: uuid::Uuid,
    ) -> Replica {
        Replica {
            node,
            pool,
            share,
            size,
            state,
            thin,
            uri,
            uuid,
        }
    }
}

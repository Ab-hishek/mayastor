#![allow(
    clippy::too_many_arguments,
    clippy::new_without_default,
    non_camel_case_types,
    unused_imports
)]
/*
 * Mayastor RESTful API
 *
 * The version of the OpenAPI document: v0
 *
 * Generated by: https://github.com/openebs/openapi-generator
 */

use crate::apis::IntoVec;

/// Pool : Pool information

/// Pool information
#[derive(Clone, Debug, Default, PartialEq, Serialize, Deserialize)]
pub struct Pool {
    /// size of the pool in bytes
    #[serde(rename = "capacity")]
    pub capacity: u64,
    /// absolute disk paths claimed by the pool
    #[serde(rename = "disks")]
    pub disks: Vec<String>,
    /// id of the pool
    #[serde(rename = "id")]
    pub id: String,
    /// id of the mayastor instance
    #[serde(rename = "node")]
    pub node: String,
    #[serde(rename = "state")]
    pub state: crate::models::PoolState,
    /// used bytes from the pool
    #[serde(rename = "used")]
    pub used: u64,
}

impl Pool {
    /// Pool using only the required fields
    pub fn new(
        capacity: impl Into<u64>,
        disks: impl IntoVec<String>,
        id: impl Into<String>,
        node: impl Into<String>,
        state: impl Into<crate::models::PoolState>,
        used: impl Into<u64>,
    ) -> Pool {
        Pool {
            capacity: capacity.into(),
            disks: disks.into_vec(),
            id: id.into(),
            node: node.into(),
            state: state.into(),
            used: used.into(),
        }
    }
    /// Pool using all fields
    pub fn new_all(
        capacity: impl Into<u64>,
        disks: impl IntoVec<String>,
        id: impl Into<String>,
        node: impl Into<String>,
        state: impl Into<crate::models::PoolState>,
        used: impl Into<u64>,
    ) -> Pool {
        Pool {
            capacity: capacity.into(),
            disks: disks.into_vec(),
            id: id.into(),
            node: node.into(),
            state: state.into(),
            used: used.into(),
        }
    }
}

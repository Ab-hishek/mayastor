#![allow(
    clippy::too_many_arguments,
    clippy::new_without_default,
    non_camel_case_types,
    unused_imports
)]
/*
 * Mayastor RESTful API
 *
 * The version of the OpenAPI document: v0
 *
 * Generated by: https://github.com/openebs/openapi-generator
 */

use crate::apis::IntoVec;

/// Pool : Pool object, comprised of a spec and a state

/// Pool object, comprised of a spec and a state
#[derive(Clone, Debug, Default, PartialEq, Serialize, Deserialize)]
pub struct Pool {
    /// storage pool identifier
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "spec", skip_serializing_if = "Option::is_none")]
    pub spec: Option<crate::models::PoolSpec>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<crate::models::PoolState>,
}

impl Pool {
    /// Pool using only the required fields
    pub fn new(id: impl Into<String>) -> Pool {
        Pool {
            id: id.into(),
            spec: None,
            state: None,
        }
    }
    /// Pool using all fields
    pub fn new_all(
        id: impl Into<String>,
        spec: impl Into<Option<crate::models::PoolSpec>>,
        state: impl Into<Option<crate::models::PoolState>>,
    ) -> Pool {
        Pool {
            id: id.into(),
            spec: spec.into(),
            state: state.into(),
        }
    }
}

import pytest
from kubernetes import client, config, dynamic, watch
from kubernetes.client import api_client
import asyncio
from kubernetes import utils


def get_api(api_name):
    client = dynamic.DynamicClient(
        api_client.ApiClient(configuration=config.load_kube_config())
    )

    _apis = {
        "msp": (
            lambda: client.resources.get(
                api_version="openebs.io/v1alpha1", kind="MayastorPool"
            )
        ),
        "msv": (
            lambda: client.resources.get(
                api_version="openebs.io/v1alpha1", kind="MayastorVolume"
            )
        ),
        "pvc": (
            lambda: client.resources.get(api_version="v1", kind="PersistentVolumeClaim")
        ),
        "pod": (lambda: client.resources.get(api_version="v1", kind="Pod")),
    }

    return _apis[api_name]()


def delete_msp(node):
    get_api("msp").delete(name=f"pool-{node}", namespace="mayastor")


async def create_msp(node, disk):
    api = get_api("msp")
    name = f"pool-{node}"
    pool = {
        "apiVersion": "openebs.io/v1alpha1",
        "kind": "MayastorPool",
        "metadata": {
            "name": name,
            "namespace": "mayastor",
        },
        "spec": {
            "node": node,
            "disks": [disk],
        },
    }
    try:
        current = api.get(name=name, namespace="mayastor")
        assert current.status.state == "online"
        assert current.spec.disks == [disk]
        print(f"Pool {name} already exists")
    except:
        api.create(body=pool, namespace="mayastor")
        await wait_for_it(api, name, "online", "mayastor")


# Create a PVC and wait for it to be Bound
async def create_pvc(name, size=1, sc="mayastor-nvmf-2"):
    size = f"{size}Gi"

    api = get_api("pvc")
    body = {
        "apiVersion": "v1",
        "kind": "PersistentVolumeClaim",
        "metadata": {"name": name},
        "spec": {
            "accessModes": ["ReadWriteOnce"],
            "volumeMode": "Filesystem",
            "resources": {"requests": {"storage": size}},
            "storageClassName": sc,
        },
    }

    try:
        current = api.get(name=name, namespace="default")
        assert current.status["phase"] == "Bound"
        print("PVC already exists")
    except:
        api.create(body=body, namespace="default")
        await wait_for_it(api, name, "Bound")


def delete_pvc(name):
    get_api("pvc").delete(name=name, namespace="default")


# wait for a resource to reach a certain state
async def wait_for_it(api, name, phase, namespace="default", iter=1000):
    while iter > 0:
        try:
            current = api.get(name=name, namespace=namespace)
            if current["status"]["phase"] == str(phase) or current["status"][
                "state"
            ] == str(phase):
                return
        except:
            pass
        iter -= 1
        if iter == 0:
            raise Exception(f"timed out {api} while creating {name}")
        await asyncio.sleep(0.1)


# wait until a resource no longer exists
async def wait_until_gone(api, name, iter=1000):
    while iter > 0:
        try:
            api.get(name=name, namespace="default")
        except:
            return
        iter -= 1
        if iter == 0:
            raise Exception(f"timed out waiting for {name} to disappear")
        await asyncio.sleep(0.1)


# watch events to a certain pod
async def watch_for(bail_on, pod):
    w = watch.Watch()
    for event in w.stream(client.CoreV1Api().list_pod_for_all_namespaces):
        if event["type"] == bail_on and event["object"].metadata.name == pod:
            print(
                "Event: %s %s %s"
                % (event["type"], event["object"].kind, event["object"].metadata.name)
            )
            assert event["object"].status.phase, "Succeeded"
            return
        await asyncio.sleep(0)


async def fio_delete(name="fio"):
    api = get_api("pod")
    api.delete(name=name, namespace="default")
    await wait_until_gone(api, "fio")


# This uses a YAML file and a configMap to start Fio
async def fio_from_yaml():
    config.load_kube_config()
    k8s_client = client.ApiClient()

    # remove the old pod in case its still there but
    # completed
    try:
        await fio_delete()
    except:
        pass

    try:
        utils.create_from_yaml(k8s_client, "k8s/fio.yaml")
    except:
        pass
    await wait_for_it(get_api("pod"), "fio", "Running")
    print("Fio is running.....")
    await wait_for_it(get_api("pod"), "fio", "Succeeded")
    print("Fio completed.....")
    await fio_delete()


# Its rather tedious to create a "large" spec by constructing the
# json object on the fly -- without using some form of templating.
# As an alternative approach we use the V1XXX models generated by
# openAPI.


async def create_fio_manifest(pvcs, size=1, runtime=30):

    size = f"{ ((size-1)*1000) + 800 }mb"
    config.load_kube_config()
    volume_mounts = []
    volumes = []
    fio_targets = []

    for i, name in enumerate(pvcs):
        volume_mounts.append(
            client.V1VolumeMount(name=f"volume-{i}", mount_path=f"/volume-{i}")
        )
        volumes.append(
            client.V1Volume(
                name=f"volume-{i}",
                persistent_volume_claim=client.V1PersistentVolumeClaimVolumeSource(
                    claim_name=name
                ),
            )
        )
        fio_targets.append(f"--name={name}")
        fio_targets.append(f"--filename=/volume-{i}/{name}.test")

    cmd = "fio --direct=1 --rw=randrw --ioengine=libaio"
    cmd += " --bs=4k --iodepth=16 --verify=crc32 --verify_fatal=1 --verify_async=2"
    cmd += f" --time_based=1 --runtime={runtime} --size={size}"

    command = cmd.split() + fio_targets

    container = client.V1Container(
        name="fio-generated",
        image="mayadata/fio",
        image_pull_policy="IfNotPresent",
        command=command,
        volume_mounts=volume_mounts,
    )

    template = client.V1PodTemplateSpec(
        metadata=client.V1ObjectMeta(name="fio"),
        spec=client.V1PodSpec(
            containers=[container],
            volumes=volumes,
            restart_policy="Never",
        ),
    )

    client.CoreV1Api().create_namespaced_pod(namespace="default", body=template)
    await wait_for_it(get_api("pod"), "fio", "Running")
    print("Fio is running.....")
    await watch_for("MODIFIED", "fio")
    print("Fio completed.....")
    logs = client.CoreV1Api().read_namespaced_pod_log(name="fio", namespace="default")

    print(logs)
    await fio_delete()


@pytest.mark.asyncio
async def test_msp():

    num_vols = 4
    # size in GB
    size = 4
    await asyncio.gather(
        create_msp("ksnode-2", "uring:///dev/vda"),
        create_msp("ksnode-3", "uring:///dev/vda"),
    )

    pvcs = [f"ms-{i}" for i in range(0, num_vols)]
    futures = []
    for pvc in pvcs:
        futures.append(create_pvc(pvc, size=size))

    await asyncio.gather(*futures)
    await create_fio_manifest(pvcs, size=size)

    # await fio_from_yaml()
    for i in range(0, num_vols):
        delete_pvc(f"ms-{i}")

    delete_msp("ksnode-2")
    delete_msp("ksnode-3")

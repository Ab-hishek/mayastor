variables:
  CARGO_HOME: $CI_PROJECT_DIR/cargo

stages:
  - prepare
  - build
  - test
  - image
  - deploy

lint:
  stage: prepare
  image: mayadata/ms-buildenv:latest
  before_script:
    - git submodule update --init --recursive
  script:
    - cargo make pre-check

build-mayastor:
  stage: build
  image: mayadata/ms-buildenv:latest
  cache:
    paths:
      - cargo/
  before_script:
    - git submodule update --init --recursive
  script:
    - CARGO_BUILD_PIPELINED=true cargo build -vvv --all
    - cd jsonrpc && cargo build --tests && cd ..
    - cd mayastor && cargo build --tests && cd ..
    # find all non executables and delete them
    - cd target/debug && find . -type f ! -executable -exec rm {} + && cd ..
  artifacts:
    expire_in: 1 day
    paths:
      - target/debug/

test-mayastor:
  stage: test
  image: mayadata/ms-buildenv:latest
  dependencies:
    - build-mayastor
  cache:
    policy: pull
    paths:
      - cargo/
      - mayastor-test/node_modules/
  before_script:
    # modprobe is symlink to /sbin/kmod invoking kmod "manually" does not work
    # kmod is programmed such that is has to be invoked through the symlink (!!)
    #
    # So, the runner is configured to mount the hosts /bin to /host/bin and
    # we create a symlink from there. Note that we also mount the hosts
    # kernel modules. We do this loading of the kernel mod early so that we fail
    # early.
    #
    - ln -s /host/bin/kmod /usr/local/bin/modprobe
    - /usr/local/bin/modprobe nbd
    # as we run on a auto scalar, we must set the hugepage sizes before we can
    # run these tests.
    #
    #
    - echo 512 | sudo tee /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages
    # we need spdk submodule because of rpc.py used for testing
    - git submodule update --init --recursive
    - cd mayastor-test && npm install && cd ..
  script:
    # run rust UTs built previously (binaries have a non deterministic hash at the end)
    - $(find target/debug -maxdepth 1 -name 'jsonrpc-*' -executable )
    - $(find target/debug -maxdepth 1 -name 'reconfigure-*' -executable )
    - $(find target/debug -maxdepth 1 -name 'io-*' -executable )
    - cd mayastor-test
    - ./node_modules/mocha/bin/mocha test_cli.js
    - ./node_modules/mocha/bin/mocha test_grpc.js
    - ./node_modules/mocha/bin/mocha test_csi.js
    - ./node_modules/mocha/bin/mocha test_nexus_grpc.js
  after_script:
    - rm -rf /dev/shm/*
    - rm -rf /dev/hugepages/spdk*
  artifacts:
    expire_in: 1 day
    paths:
      - mayastor-test/node_modules/

build-mayastor-release:
  stage: test
  image: mayadata/ms-buildenv:latest
  dependencies:
    - build-mayastor
  cache:
    paths:
      - cargo/
  before_script:
    - git submodule update --init --recursive
  script:
    - cargo build -vvv --all --release
  artifacts:
    expire_in: 1 day
    paths:
      - target/release/
  only:
    - master

image-mayastor:
  stage: image
  image: mayadata/buildah:latest
  variables:
    # REGISTRY_USERNAME - secret variable
    # REGISTRY_PASSWORD - secret variable
    # REGISTRY_SERVER - secret variable (registry.hub.docker.com)
    IMAGE_NAME: ${REGISTRY_SERVER}/mayadata/mayastor
  dependencies:
    - build-mayastor-release
    - test-mayastor
  before_script:
    # we need spdk submodule because rpc.py is part of the image
    - git submodule update --init --recursive
    - podman version
    - buildah version
    # explicit authfile is workaround for https://github.com/containers/image/issues/566
    - podman login --authfile /tmp/auth.json --username "${REGISTRY_USERNAME}" --password "${REGISTRY_PASSWORD}" "${REGISTRY_SERVER}"
  script:
    - buildah bud --layers --build-arg TARGET=release -t ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} -f mayastor/Dockerfile .
    - buildah tag ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} ${IMAGE_NAME}:latest
    - buildah push --authfile /tmp/auth.json ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}
    - buildah push --authfile /tmp/auth.json ${IMAGE_NAME}:latest
  after_script:
    - podman logout --authfile /tmp/auth.json "${REGISTRY_SERVER}"
  when: manual
  only:
    - master

# Having separate job for pushing mayastor-grpc decoupled from mayastor image
# gives us more fine grained control over which image is pushed and is
# workaround for docker hub bug when pushing to different repos in one session
# is not allowed.
image-mayastor-grpc:
  stage: image
  image: mayadata/buildah:latest
  variables:
    # REGISTRY_USERNAME - secret variable
    # REGISTRY_PASSWORD - secret variable
    # REGISTRY_SERVER - secret variable (registry.hub.docker.com)
    IMAGE_NAME: ${REGISTRY_SERVER}/mayadata/mayastor-grpc
  dependencies:
    - build-mayastor-release
    - test-mayastor
  before_script:
    - podman version
    - buildah version
    # explicit authfile is workaround for https://github.com/containers/image/issues/566
    - podman login --authfile /tmp/auth.json --username "${REGISTRY_USERNAME}" --password "${REGISTRY_PASSWORD}" "${REGISTRY_SERVER}"
  script:
    - buildah bud --layers --build-arg TARGET=release -t ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} -f mayastor-grpc/Dockerfile .
    - buildah tag ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} ${IMAGE_NAME}:latest
    - buildah push --authfile /tmp/auth.json ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}
    - buildah push --authfile /tmp/auth.json ${IMAGE_NAME}:latest
  after_script:
    - podman logout --authfile /tmp/auth.json "${REGISTRY_SERVER}"
  when: manual
  only:
    - master

test-moac:
  stage: build
  image: node:10
  cache:
    paths:
      - moac/node_modules/
  before_script:
    - cd csi/moac
    - npm install
  script:
    - ./node_modules/mocha/bin/mocha
  after_script:
    # we don't want modules used for testing in resulting image (>6000 files)
    - cd csi/moac
    - npm prune --production
    # workaround for buildah issue https://github.com/containers/buildah/issues/1598
    - find node_modules -name .bin | xargs rm -r
  artifacts:
    expire_in: 1 day
    paths:
      - moac/node_modules/

image-moac:
  stage: image
  image: mayadata/buildah:latest
  variables:
    # REGISTRY_USERNAME - secret variable
    # REGISTRY_PASSWORD - secret variable
    # REGISTRY_SERVER - secret variable (registry.hub.docker.com)
    # KUBE_CONFIG - secret variable
    IMAGE_NAME: ${REGISTRY_SERVER}/mayadata/moac
  dependencies:
    - test-moac
  before_script:
    - podman version
    - buildah version
    # explicit authfile is workaround for https://github.com/containers/image/issues/566
    - podman login --authfile /tmp/auth.json --username "${REGISTRY_USERNAME}" --password "${REGISTRY_PASSWORD}" "${REGISTRY_SERVER}"
  script:
    - buildah bud --layers -t ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} -f moac/Dockerfile .
    - buildah tag ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} ${IMAGE_NAME}:latest
    - buildah push --authfile /tmp/auth.json ${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}
    - buildah push --authfile /tmp/auth.json ${IMAGE_NAME}:latest
  after_script:
    - podman logout --authfile /tmp/auth.json "${REGISTRY_SERVER}"
  when: manual
  only:
    - master

deploy:
  stage: deploy
  image: mayadata/buildah:latest
  before_script:
    - mkdir ~/.kube || true
    # KUBE_CONFIG was created by: cat ~/.kube/config | base64 | pbcopy
    - echo "${KUBE_CONFIG}" | base64 -d > ~/.kube/config
    - cd deploy
  script:
    - kubectl apply -f namespace.yaml
    - kubectl delete --namespace=mayastor --ignore-not-found=true secret regcred
    - sed s/:latest/:${CI_COMMIT_SHORT_SHA}/ moac-deployment.yaml | kubectl apply -f -
    - sed s/:latest/:${CI_COMMIT_SHORT_SHA}/ mayastor-daemonset.yaml | kubectl apply -f -
  when: manual
  only:
    - master
